<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSHARP.Text</name>
    </assembly>
    <members>
        <member name="T:CSHARP.Text.Base64Helper">
            <summary>
            Assists in encoding and decoding to and from base 64
            </summary>
        </member>
        <member name="M:CSHARP.Text.Base64Helper.Base64Encode(System.String)">
            <summary>
            Base 64 encoder
            </summary>
            <param name="toEncode">String to encode in to Base64</param>
            <returns>Encoded String</returns>
            <remarks>V2.0.0.2 Case Corrected in method name</remarks>
        </member>
        <member name="M:CSHARP.Text.Base64Helper.Base64Decode(System.String)">
            <summary>
            Base 64 decoder
            </summary>
            <param name="data">Base64 data to decode</param>
            <returns>Decoded String</returns>
        </member>
        <member name="T:CSHARP.Text.StringHelper">
            <summary>
            General function to help manupulate strings
            </summary>
        </member>
        <member name="M:CSHARP.Text.StringHelper.Get8CharacterRandomString">
            <summary>
            Generates an 8 character random string based on random filename function
            </summary>
            <returns>8 character random number</returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.ConvertToUrlFriendly(System.String,System.String)">
            <summary>
            Converts an url friendly string by replacing all non-alphanumeric and spaces with an alternate string
            </summary>
            <param name="toConvert">String to convert</param>
            <param name="replaceUnfriendlyWith">string to replace non-friendly characters with</param>
            <returns></returns>
            <remarks>NEW in V2.0.0.8
            2.0.0.10 - Spaces were being replaced with empty string rather than replaceUnfriendlyWith
            </remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.ConvertToAlphaNumeric(System.String,System.Boolean)">
            <summary>
            Removes all non-alpha-numeric from string.
            </summary>
            <param name="toConvert">String to remove alpha-numeric from</param>
            <param name="removeWhiteSpace">if true removes spaces and, tabs.</param>
            <returns>alpha-numeric string</returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.ConvertToAlphaNumeric(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts all non-alpha-numeric to spaces in the string.  
            Removes White Spaces and Underscores if requested
            </summary>
            <param name="toConvert">String to remove alpha-numeric from</param>
            <param name="removeWhiteSpace">if true removes spaces and, tabs.</param>
            <param name="removeUnderScore">if true reomoves underscores</param>
            <returns>alpha-numeric string</returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.ConvertToCsv(System.Collections.IEnumerable,System.Type)">
            <summary>
            Converts a list of objects to CSV
            </summary>
            <param name="collection">Collection of objects to generate CSV from</param>
            <param name="type">type of object being generated</param>
            <returns>csv string</returns>
            <remarks>V2.0.0.2 Case Corrected in method name</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringIntoWords(System.String)">
            <summary>
            Splits a string into its words for manipulation
            </summary>
            <param name="toSplit">String to split into words</param>
            <returns></returns>
            <remarks>Uses default values to split words</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringIntoWords(System.String,System.Char[])">
            <summary>
            Splits a string into its words for manipulation
            </summary>
            <param name="toSplit">String to split into words</param>
            <param name="endOfWordToken"></param>
            <returns></returns>
            <remarks>vv2.0.0.11 Strips string before splitting into words</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringIntoLines(System.String)">
            <summary>
            Splits a string into lines for manipulation
            </summary>
            <param name="toSplit">string containing words</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringToDictionary(System.String,System.Char,System.Char)">
            <summary>
            Splits the string to dictionary given tokens.
            </summary>
            <param name="toSplit">string to split</param>
            <param name="keyValueToken">token to split key and value</param>
            <param name="entryToken">token to split each dictionary entry</param>
            <returns></returns>
            <remarks>NEW in v2.0.0.3</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringToDistinctDictionary(System.String,System.Char,System.Char)">
            <summary>
            Splits the string to dictionary given tokens, only including duplicate keys once.
            </summary>
            <param name="toSplit">string to split</param>
            <param name="keyValueToken">token to split key and value</param>
            <param name="entryToken">token to split each dictionary entry</param>
            <returns></returns>
            <remarks>NEW in v2.0.0.5</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringToDictionaryOnEndOfLine(System.String,System.Char)">
            <summary>
            Splits the string to dictionary on the end of line marker.
            </summary>
            <param name="input">string to split</param>
            <param name="token">token to split key and value</param>
            <returns></returns>
            <remarks>FIX: 2.0.0.2 - Exception on Line with key and no value</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringOnEndOfLine(System.String)">
            <summary>
            Splits the string on the end of line marker.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.SplitStringOnEndOfLineDistinct(System.String)">
            <summary>
            Splits the string on the end of line marker. Only include distinct strings
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>NEW in 2.0.0.6</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.StringArrayToDistinctDelimitedString(System.String[],System.Char)">
            <summary>
            Builds a delimited string from a string array. Only include distinct strings
            </summary>
            <param name="items">array of strings</param>
            <param name="token">delimiter</param>
            <returns></returns>
            <remarks>NEW in 2.0.0.6</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.StringArrayToDelimitedString(System.String[],System.Char)">
            <summary>
            Builds a delimited string from a string array
            </summary>
            <param name="items">array of strings</param>
            <param name="token">delimiter</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.StringListToDelimitedString(System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Builds a delimited string from a list of strings
            </summary>
            <param name="items">list of strings</param>
            <param name="token">delimiter</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.StringListToEndOfLineDelimited(System.Collections.Generic.List{System.String})">
            <summary>
            Builds a string containing a string per line from a delimited string 
            </summary>
            <param name="items">list of strings</param>
            <returns></returns>
            <remarks>NEW in 2.0.0.7</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DelimitedStringToGuidList(System.String,System.Char)">
            <summary>
            Builds an array of strings from a delimited string 
            </summary>
            <param name="delimitedString">delimited string</param>
            <param name="token">delimiter</param>
            <returns></returns>
            <remarks>FIXED v2.0.0.10 - Returns null if null passed in</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DelimitedStringToStringArray(System.String,System.Char)">
            <summary>
            Builds an array of strings from a delimited string 
            </summary>
            <param name="delimitedString">delimited string</param>
            <param name="token">delimiter</param>
            <returns></returns>
            <remarks>FIXED v2.0.0.10 - Returns null if null passed in</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DelimitedStringToStringList(System.String,System.Char)">
            <summary>
            Builds an array of strings from a delimited string 
            </summary>
            <param name="delimitedString">delimited string</param>
            <param name="token">delimiter</param>
            <returns></returns>
            <remarks>FIXED v2.0.0.10 - Returns null if null passed in</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DelimitedStringToStringArray(System.String,System.String)">
            <summary>
            Builds an array of strings from a delimited string 
            </summary>
            <param name="delimitedString">delimited string</param>
            <param name="token">delimiter</param>
            <returns></returns>
            <remarks>FIXED v2.0.0.10 - Returns null if null passed in</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DelimitedStringToEndOfLineDelimited(System.String,System.String)">
            <summary>
            Builds a string containing a string per line from a delimited string 
            </summary>
            <param name="delimitedString">delimited string</param>
            <param name="token">delimiter</param>
            <returns></returns>
            <remarks>FIXED v2.0.0.10 - Returns null if null passed in</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GuidListToDelimitedString(System.Collections.Generic.List{System.Guid},System.Char)">
            <summary>
            Builds a delimited string from a list of strings
            </summary>
            <param name="items">list of strings</param>
            <param name="token">delimiter</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfter(System.String,System.String)">
            <summary>
            Removes all text after the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfter(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text after the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfter(System.String,System.String,System.String)">
            <summary>
            Removes all text after the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfterOneOf(System.String,System.Char[],System.String)">
            <summary>
            Removes all text after the first occurence of one of the given tokens
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="tokens">array of tokens to look for</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
            <remarks>NEW In v2.0.0.9</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfterLast(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text after the last occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfterLast(System.String,System.String,System.String)">
            <summary>
            Removes all text after the last occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetAfterPosition(System.String,System.Int32)">
            <summary>
            Gets text after a given position
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="position">position to get content after</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteAfter(System.String,System.String)">
            <summary>
            Removes all text after the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteAfter(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text after the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteAfter(System.String,System.String,System.String)">
            <summary>
            Removes all text after the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteAfterLast(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text after the last occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteAfterLast(System.String,System.String,System.String)">
            <summary>
            Removes all text after the last occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.FindOneOf(System.String,System.Char[])">
            <summary>
            Finds the first occurance of one of the characters in the tokens string in the snippet
            </summary>
            <param name="snippet">String to search inside</param>
            <param name="tokens">character tokens to search for inside snippet</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetFirst(System.String,System.Int32)">
            <summary>
            Gets the first x characters in a string
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="length">number of characters to get from the beginning for the string</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetFirst(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the first x characters in a string
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="length">number of characters to get from the beginning for the string</param>
            <param name="addEllipsis">if true, will reduce length by an addition 3 characters and adds ... to the end</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetLast(System.String,System.Int32)">
            <summary>
            Gets the last x characters in a string
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="length">number of characters to get from the end for the string</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBefore(System.String,System.String)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBefore(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBefore(System.String,System.String,System.String)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBeforeOneOf(System.String,System.Char[],System.String)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="tokens">array of tokens to look for</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
            <remarks>NEW in v2.0.0.9</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBeforeLast(System.String,System.String)">
            <summary>
            Removes all text before the last occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBeforeLast(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBeforeLast(System.String,System.String,System.String)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBeforePosition(System.String,System.Int32)">
            <summary>
            Removes all text after a given position in a string
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="position">position to get content before</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteBefore(System.String,System.String)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteBefore(System.String,System.String,System.Boolean)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteBefore(System.String,System.String,System.String)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content before</param>
            <param name="including">Determines if returned string includes the token</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.DeleteBeforePosition(System.String,System.Int32)">
            <summary>
            Removes all text before the first occurence of a given token
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="position">position to delete content before</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBetween(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the string content between the beforeToken and afterToken.
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="afterToken"></param>
            <param name="beforeToken"></param>
            <param name="including"></param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBetween(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the string content between the beforeToken and afterToken.
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="afterToken"></param>
            <param name="beforeToken"></param>
            <param name="including"></param>
            <returns></returns>
            <remarks>FIXED v2.0.0.4 - Including was missing before token</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.GetBetweenPositions(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the string content between two positions.
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="afterPosition"></param>
            <param name="beforePosition"></param>
            <param name="beforeTokenLength"></param>
            <returns></returns>
            <remarks>FIXED v2.0.0.4 - Including was missing before token</remarks>
        </member>
        <member name="M:CSHARP.Text.StringHelper.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            Replaces the last occurence of a given token with the replacement string
            </summary>
            <param name="snippet">String containing text to parse</param>
            <param name="token">string to delete content after</param>
            <param name="replaceWith"></param>
            <returns></returns>
        </member>
        <member name="T:CSHARP.Text.StringValidation">
            <summary>
            Static Functions to assist in validating strings
            </summary>
        </member>
        <member name="T:CSHARP.Text.StringValidation.ValidStringTypes">
            <summary>
            Types of data that is storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.All">
            <summary>
            All types of data that is storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.Alpha">
            <summary>
            Letters can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.AlphaNumeric">
            <summary>
            Letters and numbers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.Email">
            <summary>
            Email addresses can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.Integer">
            <summary>
            Integers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.NaturalNumber">
            <summary>
            Natural numbers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.Number">
            <summary>
            Numbers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.Phone">
            <summary>
            Phone numbers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.PositiveNumber">
            <summary>
            Positive numbers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.PostalCode">
            <summary>
            Postal Codes can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.Url">
            <summary>
            Urls can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.WholeNumber">
            <summary>
            Whole numbers can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ValidStringTypes.ZipCode">
            <summary>
            Zip Codes can be storeable in a string
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.NotIntegerRegex">
            <summary>
            Regular Expression used to validate string is not an integer
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.NotNaturalNumberRegex">
            <summary>
            Regular Expression used to validate string is not a natural number
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.NotWholeNumberRegex">
            <summary>
            Regular Expression used to validate string is not a whole number
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.NotPositiveNumberRegex">
            <summary>
            Regular Expression used to validate string is not an positive number
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.NotNumberRegex">
            <summary>
            Regular Expression used to validate string is not a number
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.AlphaRegex">
            <summary>
            Regular Expression used to validate strings with alphabet characters only
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.AlphaNumericRegex">
            <summary>
            Regular Expression used to validate string with alphabet and numeric characters
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.AlphaNumericOrUnderscoreRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.EmailRegex">
            <summary>
            Regular Expression used to validate email addresses
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.IntegerRegex">
            <summary>
            Regular Expression used to validate integers
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.NaturalNumberRegex">
            <summary>
            Regular Expression used to validate natural numbers
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.RealNumberRegex">
            <summary>
            Regular Expression used to validate real numbers
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.PhoneRegex">
            <summary>
            Regular Expression used to validate phone numbers
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.PositiveNumberRegex">
            <summary>
            Regular Expression used to validate positive numbers
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.PostalCodeRegex">
            <summary>
            Regular Expression used to validate postal codes
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.TwoDotPositiveNumberRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.TwoMinusNumberRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.UrlRegex">
            <summary>
            Regular Expression used to validate Urls
            </summary>
        </member>
        <member name="F:CSHARP.Text.StringValidation.ZipCodeRegex">
            <summary>
            Regular Expression used to validate Zip Codes
            </summary>
        </member>
        <member name="M:CSHARP.Text.StringValidation.SAFE_TEXT(System.String)">
            <summary>
            Removes any possible injection code
            </summary>
            <param name="text">Text to clean</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsValid(CSHARP.Text.StringValidation.ValidStringTypes,System.String)">
            <summary>
            Returns true if string matches valid data type passed in
            </summary>
            <param name="validStringType">Type of data expected in text</param>
            <param name="text">string to validate</param>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsEmail(System.String)">
            <summary>
            Checks if the string passed in is a valid email address
            </summary>
            <param name="text">string to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsPhoneNumber(System.String)">
            <summary>
            Checks if the string passed in is a valid phone number
            </summary>
            <param name="text">string to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsPostalCode(System.String)">
            <summary>
            Checks if the string passed in is a valid postal code
            </summary>
            <param name="text">string to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsUrl(System.String)">
            <summary>
            Checks if the string passed in is a valid url
            </summary>
            <param name="text">string to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsZipCode(System.String)">
            <summary>
            Checks if the string passed in is a valid zip code
            </summary>
            <param name="text">string to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsNaturalNumber(System.String)">
            <summary>
            Checks if string passed in is a valid Positive Integer
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsWholeNumber(System.String)">
            <summary>
            Checks if string passed in is a valid Positive Integers with zero inclusive 
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsInteger(System.String)">
            <summary>
            Checks if string passed in is a valid Integers both Positive and Negative 
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsPositiveNumber(System.String)">
            <summary>
            Checks if string passed in is a valid Positive Number both Integer and Real 
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsNumber(System.String)">
            <summary>
            Checks if string passed in is a valid number or not
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsAlpha(System.String)">
            <summary>
            Checks if string passed in is a valid Alphabets
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsAlphaNumeric(System.String)">
            <summary>
            Checks if string passed in is a valid AlphaNumeric
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="M:CSHARP.Text.StringValidation.IsAlphaNumericOrUnderscore(System.String)">
            <summary>
            Checks if string passed in is a valid AlphaNumeric (may contain underscore)
            </summary>
            <param name="text">string containing number to validate</param>
            <returns></returns>
        </member>
        <member name="T:CSHARP.Text.Utf8StringWriter">
            <summary>
            String Writer that encodes in UTF-8
            </summary>
        </member>
        <member name="M:CSHARP.Text.Utf8StringWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Writes string with UTF8 Encoding
            </summary>
            <param name="stringBuilder">Builder containing content to write</param>
        </member>
        <member name="P:CSHARP.Text.Utf8StringWriter.Encoding">
            <summary>
            Sets the encoding
            </summary>
        </member>
    </members>
</doc>
